// Readable one-line renderer
const grRol = ({ vw, vh, vx, vy, sc, sh, rf }) => sh.reduce((m, sh) => m.map((_, y) => _.map((v, x) => ((ux, uy) => ((cx, cy, px, py) => (nv => nv > v ? nv : v)(sh({ vw, vh, vx, vy, sc, x, y, cx, cy, px, py })))(x => vx + (x - ux) / (2 * sc), y => vy - (y - uy) / sc, x => Math.round(ux + 2 * sc * (x - vx)), y => Math.round(uy - sc * (y - vy))))(Math.round((sc * vw * 2 - 1) / 2), Math.round((sc * vh - 1) / 2)))),[ ...Array(vh * sc) ].map(() => [ ...Array(vw * sc * 2) ].map(() => 0))).map((r, _) => r.map(rf).join('')).join('\n');

// Minified renderer
const grMin = ({vw,vh,vx,vy,sc,sh,rf})=>sh.reduce((m,sh)=>m.map((_,y)=>_.map((v,x)=>((ux, uy)=>((cx,cy,px,py)=>(nv=>nv>v?nv:v)(sh({vw,vh,vx,vy,sc,x,y,cx,cy,px,py})))(x=>vx+(x-ux)/(2*sc),y=>vy-(y-uy)/sc,x=>Math.round(ux+2*sc*(x-vx)),y=>Math.round(uy-sc*(y-vy))))(Math.round((sc*vw*2-1)/2),Math.round((sc*vh-1)/2)))),[...Array(vh*sc)].map(()=>[...Array(vw*sc*2)].map(()=>0))).map((r,_)=>r.map(rf).join('')).join('\n');

module.exports = { grRol, grMin };